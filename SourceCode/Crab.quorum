use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Compute.Math
use Libraries.Compute.Vector3
use Libraries.Game.Graphics.PointLight
use Libraries.Game.Audio3D
use Libraries.Game.Graphics.Drawable
use Libraries.Compute.Random

class Crab is Model 
PointLight characterLight
Audio3D audio
Wall leftWall
Wall rightWall
Math math
Random random
integer speed = 28
integer direction = 1 // 1 means right and -1 means left

action GetLeftWall() returns Wall
return leftWall
end

action GetRightWall() returns Wall
return rightWall
end

action SetLeftWall(Wall wall)
leftWall = wall
end

action SetRightWall(Wall wall)
rightWall = wall
end

action SpawnRandomly()
        SetPosition(random:RandomIntegerBetween(cast(integer, leftWall:GetRightEdge()), cast(integer, rightWall:GetLeftEdge())), random:RandomIntegerBetween(cast(integer, leftWall:GetTopEdge()), cast(integer, rightWall:GetTopEdge())), random:RandomIntegerBetween(cast(integer, leftWall:GetFrontEdge()), cast(integer, rightWall:GetBackEdge())))
end

    action LoadCrab(number width, number height, number depth, Wall leftWall, Wall rightWall)
        //Load a model to represent our character
        //Give our character an initial position
        
        me:leftWall = leftWall
        me:rightWall = rightWall
Drawable crab
        crab:Load("crab.png")
        LoadCylinder(width, height, depth, crab)
        SetDescription("Crab")

        //Set our point lights s color, position, and intensity 
Color characterLightColor
        characterLightColor:SetColor(0.98, 0.98, 0.82, 1)
        characterLight:SetColor(characterLightColor)
        characterLight:SetIntensity(100)
        Add(characterLight)

        SpawnRandomly()

        audio:Load("crabWalk.ogg")
        audio:EnableLooping()
        audio:Play()
        Add(audio)
    end

    action Update(number seconds)
        Move(direction*speed*seconds, 0, 0)

//output("crab X: "+GetPosition():GetX())
//output("Left Wall X: "+leftWall:GetPosition():GetX())
//output("Right Wall X: "+rightWall:GetPosition():GetX())

            if math:AbsoluteValue(GetPosition():GetX()-leftWall:GetPosition():GetX()+(leftWall:GetWidth()/2.0)) < 1.0 or math:AbsoluteValue(GetPosition():GetX() - rightWall:GetPosition():GetX()-(rightWall:GetWidth()/2.0)) < 1.0
                direction = direction * -1 // flip the direction
        SpawnRandomly()
            end
    end
end
